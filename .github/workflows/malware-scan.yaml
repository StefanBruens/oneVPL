name: Malware Scan
run-name: Malware Scan (Triggered by ${{ github.event_name }} by @${{ github.actor }})
on:
  workflow_call:
    inputs:
      ARTIFACT:
        description: 'Artifact to test'
        type: string
      CAAS:
        description: 'CaaS Image'
        type: string
      TEST_AV:
        description: 'Write EICAR test file to test AV Tool'
        type: boolean

jobs:
  malware-scan:
    runs-on: [self-hosted, Linux, docker]
    steps:
      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *

      # get files to scan
      - name: Checkout dispatcher source
        if: success() && !inputs.ARTIFACT
        uses: actions/checkout@v3
        with:
          path: product
      - name: Download package
        if: success() && inputs.ARTIFACT
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.ARTIFACT }}
          path: product
      - name: Extract package
        if: success() && inputs.ARTIFACT
        run: |
          if compgen -G "product/*.zip" > /dev/null; then
            unzip product/*.zip -d product
          fi

      # Write test file if requested
      - name: Write EICAR test file
        if: success() && inputs.TEST_AV
        run: |
          echo 'X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' > product/eicar-com.com

      # CaaS based testing
      - name: Create docker image
        if: success() && inputs.CAAS
        run: |
          docker pull ${{ inputs.CAAS }}
      - name: Run Test
        if: success() && inputs.CAAS
        run: |
          docker run -v $(realpath product):/scanme --rm ${{ inputs.CAAS }} >> report.txt

      # Local image based testing
      - name: Checkout av scanning tool
        if: success() && !inputs.CAAS
        uses: actions/checkout@v3
        with:
          repository: ${{ vars.AV_TOOL_REPO }}
          token: ${{ secrets.TEST_REPO_TOKEN }}
          path: av-scanning
          ref: master
      - name: Create docker image
        if: success() && !inputs.CAAS
        run: |
          pushd av-scanning
          sed -i 's|FROM.*ubuntu:latest|FROM public.ecr.aws/lts/ubuntu:22.04|' Dockerfile
          docker build -t mcafee:latest .
          popd
      - name: Run Test
        if: success() && !inputs.CAAS
        run: |
          docker run -v $(realpath product):/scanme --rm mcafee:latest >> report.txt

      # Publish
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ inputs.ARTIFACT || 'source' }}-malware-scan
          path: report.txt

      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *
  