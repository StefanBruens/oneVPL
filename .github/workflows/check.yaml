name: Check
run-name: Check (Triggered by ${{ github.event_name }} by @${{ github.actor }})
on:
  pull_request:
    # Run on pull requests
  workflow_dispatch:
    # Run on user request

concurrency:
  # Cancel any exisitng jobs related to the target branch
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup Testing
    runs-on: [self-hosted, linux]
    outputs:
      refrence_ref: ${{ env.refrence_ref }}
      test_ref: ${{ env.test_ref }}
    env:
      test_ref: ''
      refrence_ref: ''
    steps:
      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *

      # Get ref of code to be used as reference
      - name: Checkout dispatcher source
        uses: actions/checkout@v3
        with:
          path: source
          fetch-depth: 0
          ref: '${{ github.event.pull_request.head.sha }}'
      - name: Build variables
        id: run
        run: |
          cd source
          echo "refrence_ref=$(git describe --abbrev=0 --tags --match=v*)" >> $GITHUB_ENV

      # Get ref of test to be used
      # If this is a pull request prefer a branch of the same name as the branch being merged into
      # Otherwise try to use a branch of the same name
      # Otherwise use main
      - name: Checkout tests from base_ref
        if: github.base_ref
        id: check-tests-from-base_ref
        uses: actions/checkout@v3
        continue-on-error: true
        with:
          repository: ${{ vars.TEST_REPO }}
          token: ${{ secrets.TEST_REPO_TOKEN }}
          path: tests
          fetch-depth: 0
          ref: ${{ github.base_ref }}
      - name: Use tests from base_ref
        if: steps.check-tests-from-base_ref.outcome == 'success'
        id: use-tests-from-base_ref
        run: |
          echo "test_ref=${{ github.base_ref }}" >> $GITHUB_ENV

      - name: Checkout tests from ref_name
        if: steps.check-tests-from-base_ref.outcome != 'success'
        id: check-tests-from-ref_name
        uses: actions/checkout@v3
        continue-on-error: true
        with:
          repository: ${{ vars.TEST_REPO }}
          token: ${{ secrets.TEST_REPO_TOKEN }}
          path: tests
          fetch-depth: 0
          ref: ${{ github.ref_name }}
      - name: Use tests from ref_name
        if: steps.check-tests-from-ref_name.outcome == 'success'
        id: use-tests-from-ref_name
        run: |
          echo "test_ref=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Use tests from default
        if: steps.check-tests-from-base_ref.outcome != 'success' && steps.check-tests-from-ref_name.outcome != 'success'
        run: |
          echo "test_ref=main" >> $GITHUB_ENV

      - name: Report
        if: always()
        run: |
          echo "test_ref=${{ env.test_ref }}"
          echo "refrence_ref=${{ env.refrence_ref }}"
  
      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *

      - name: Checkout tests
        uses: actions/checkout@v3
        with:
          repository: ${{ vars.TEST_REPO }}
          token: ${{ secrets.TEST_REPO_TOKEN }}
          path: tests
          ref: ${{ needs.setup.outputs.test_ref }}

      # To allow override of runtimes we look for a "runtimes"
      # folder in the test repo.
      - name: load runtimes
        run: |
          mkdir runtimes
          if [ -d tests/runtimes ]
          then
            cp -r tests/runtimes/. ./runtimes/
          fi
      # Other methods may be used to override runtimes, whatever
      # method is used should result in the runtimes being stored in
      # the "runtimes" 
      - name: Cache Runtimes
        uses: actions/cache@v3
        with:
          path: runtimes
          key: runtimes

  lint:
    name: Lint
    runs-on: [self-hosted, linux, docker]
    steps:
      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *
      - name: Checkout dispatcher source
        uses: actions/checkout@v3
        with:
          path: source
          ref: '${{ github.event.pull_request.head.sha }}'
      - name: Create Docker Image
        run: >
          docker build "source/script"
          -f "source/script/Dockerfile.ubuntu.build"
          -t vpl_build:ubuntu
      - name: Lint source in container
        run: |
          cat <<'EOL' > lint.sh
          #!/bin/bash
          set -x
          set -o pipefail
          source/script/test lint | tee lint.log
          ret=$?
          set +o pipefail
          exit $ret
          EOL
          chmod +x lint.sh

          docker run --rm -v $(pwd):/tmp/work -w /tmp/work \
          vpl_build:ubuntu ./lint.sh
      - name: Report
        if: success() || failure()
        run: |
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat lint.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *

  hadolint:
    name: Hadolint
    uses: ./.github/workflows/hadolint.yaml
    secrets: inherit

  trivy:
    name: Trivy
    uses: ./.github/workflows/trivy.yaml
    secrets: inherit
  
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
          config: [release, debug, experimental-off]
    uses: ./.github/workflows/build.yaml
    secrets: inherit
    with:
      OS: ${{ matrix.os }}
      CONFIG: ${{ matrix.config }}
      ARTIFACT: ${{ matrix.os }}-${{ matrix.config }}-build

  ref-build:
    name: Build Reference
    needs: [setup]
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
          config: [release]
          reference: ['${{ needs.setup.outputs.refrence_ref }}']
    uses: ./.github/workflows/build.yaml
    secrets: inherit
    with:
      OS: ${{ matrix.os }}
      CONFIG: ${{ matrix.config }}
      ARTIFACT: ref-${{ matrix.os }}-${{ matrix.config }}-build
      REF: ${{ matrix.reference }}

  diff-report:
    name: Diff Report
    needs: [setup, ref-build, build]
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
    uses: ./.github/workflows/diff-report.yaml
    secrets: inherit
    with:
      DEST: ${{ matrix.os }}-diff-report
      LEFT: ref-${{ matrix.os }}-release-build
      RIGHT: ${{ matrix.os }}-release-build

  linux-distro-support:
    name: Linux Distro Test
    needs: [setup, build]
    strategy:
      fail-fast: false
      matrix:
          include:
            - distro: rhel
              version: 8
              fatal: true
            - distro: rhel
              version: 9
              fatal: true
            - distro: centos
              version: 9
              fatal: true
            - distro: ubuntu
              version: 20.04
              fatal: false
            - distro: ubuntu
              version: 22.04
              fatal: false
    uses: ./.github/workflows/linux-distro-test.yaml
    secrets: inherit
    with:
      DISTRO_FAMILY: ${{ matrix.distro }}
      DISTRO_VERSION: ${{ matrix.version }}
      TEST_REF: ${{ needs.setup.outputs.test_ref }}
      NONFATAL: ${{ !matrix.fatal }}

  acceptance-test:
    name: Acceptance Test
    needs: [setup, build]
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
          config: [release, debug]
          accelerator: [gen12.5, gen9.5]
    uses: ./.github/workflows/acceptance.yaml
    secrets: inherit
    with:
      TEST_REF: ${{ needs.setup.outputs.test_ref }}
      OS: ${{ matrix.os }}
      CONFIG: ${{ matrix.config }}
      GPU_FAMILY: ${{ matrix.accelerator }}
      ARTIFACT: ${{ matrix.os }}-${{ matrix.config }}-build
      NONFATAL: ${{ matrix.CONFIG == 'debug' && true || false }}

  compiler-settings:
    name: Compiler Settings Test
    needs: build
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
          config: [release]
    uses: ./.github/workflows/compiler-settings.yaml
    secrets: inherit
    with:
      OS: ${{ matrix.os }}
      ARTIFACT: ${{ matrix.os }}-${{ matrix.config }}-build
      NONFATAL: ${{ matrix.CONFIG == 'debug' && true || false }}

  ip-leak-scan:
    name: IP Leak Scan
    uses: ./.github/workflows/ip-leak-scan.yaml
    secrets: inherit

  binary-malware-scan:
    name: Malware Scan
    needs: build
    strategy:
      fail-fast: false
      matrix:
          os: [windows, linux]
          config: [release]
    uses: ./.github/workflows/malware-scan.yaml
    secrets: inherit
    with:
      ARTIFACT: ${{ matrix.os }}-${{ matrix.config }}-build

  source-malware-scan:
    name: Malware Scan Source
    uses: ./.github/workflows/malware-scan.yaml
    secrets: inherit

  vulnerability-scan:
    name: Vulnerability Scan
    needs: build
    uses: ./.github/workflows/vulnerability-scan.yaml
    secrets: inherit

  coverity:
    name: Coverity Scan
    strategy:
      fail-fast: false
      matrix:
        os: [windows, linux]
    # WA - not really a dependency, but force this scan to run later in the workflow
    #      so that other tests can run (and fail) earlier in the CI checks
    needs: diff-report
    uses: ./.github/workflows/coverity.yaml
    secrets: inherit
    with:
      OS: ${{ matrix.os }}

  dynamic-analysis:
    name: Dynamic Analysis
    needs: [setup, build]
    uses: ./.github/workflows/dynamic-analysis.yaml
    secrets: inherit
    with:
      ARTIFACT: linux-release-build

  summary:
    name: Summary
    needs: 
      - ip-leak-scan
      - build
      - acceptance-test
      - compiler-settings
      - coverity
      - vulnerability-scan
      - linux-distro-support
      - diff-report
      - dynamic-analysis
      - binary-malware-scan
      - source-malware-scan
    uses: ./.github/workflows/release-summary.yaml
    secrets: inherit

  required:
    name: required
    needs:
      - trivy
      - hadolint
      - lint
      - build
      - linux-distro-support
      - acceptance-test
      - compiler-settings
      - ip-leak-scan
      - vulnerability-scan
      - coverity
      - dynamic-analysis
      - binary-malware-scan
      - source-malware-scan
    runs-on: [self-hosted]
    steps:
      - name: Required Checks
        run: echo Done
