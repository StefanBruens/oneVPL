name: Complier Settings
on:       
  workflow_call:
     inputs:
      OS:
        description: 'Operating system'
        required: true
        type: string
      ARTIFACT:
        description: 'Artifact to test'
        required: true
        type: string
      NONFATAL:
        description: 'Errors are nonfatal'
        required: false
        default: false
        type: boolean
        
jobs:
  compiler-settings:
    runs-on: [self-hosted, "${{ inputs.OS }}"]
    steps:
      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *

      - name: Cleanup workspace (Windows)
        if: always() && runner.os == 'Windows'
        run: Remove-Item -Recurse -Force .\*

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.ARTIFACT }}
          path: package

      - name: Extract package (Linux)
        if: success() && runner.os == 'Linux'
        run: unzip package/*.zip -d _install

      - name: Extract package (Windows)
        if: success() && runner.os == 'Windows'
        run: Expand-Archive -Force -Path package\*.zip -DestinationPath _install
        
      - name: Build Docker image (Linux)
        if: success() && runner.os == 'Linux'
        run: |
          USER_ID=$(id -u ${USER})
          GROUP_ID=$(id -g ${USER})
          # Dockerfile will contain everything between <<EOL and EOL
          cat >Dockerfile <<EOL
          FROM ubuntu:22.04

          # Install python
          RUN apt-get update && apt-get install -y --no-install-recommends \
              python3 \
              python3-pip \
              python3-venv \
              && \
            rm -rf /var/lib/apt/lists/*

          # Install sscp prerequisites
          RUN apt-get update && apt-get install -y --no-install-recommends \
              binutils \
              file \
              && \
            rm -rf /var/lib/apt/lists/* 
          RUN  python3 -m pip install setuptools \
            && python3 -m pip install wheel \
            && python3 -m pip install ${{ vars.COMPILER_SETTINGS_TOOL_URL }}
          RUN groupadd -g $GROUP_ID user || true
          RUN useradd --disabled-password --gecos "" --uid $USER_ID --gid $GROUP_ID user || true
          EOL
          docker build -t vplcompiler_settings:github_runner .

      - name: Check compiler settings in container (Linux)
        if: success() && runner.os == 'Linux'
        run: |
          cat >action.sh <<EOL 
          #!/bin/bash
          set -x
          set -o errexit ; set -o nounset
          sscb run --path _install --outpath _logs --report_name Linux
          EOL
          chmod +x action.sh

          docker run --rm -v $PWD:/working -w/working vplcompiler_settings:github_runner /working/action.sh


      - name: Run Compiler Settings Check (Windows)
        if: success() && runner.os == 'Windows'
        run: |
          py -m venv venv
          venv\Scripts\activate
          py -m pip install --upgrade pip
          py -m pip install ${{ vars.COMPILER_SETTINGS_TOOL_URL }} --use-pep517
          sscb run --path "_install" --outpath "_logs" --report_name Windows

      - name: Checkout dispatcher source
        uses: actions/checkout@v3
        with:
          path: source
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check Disposition issue (Linux)
        if: success() && runner.os == 'Linux'
        run: |
          output=$(python3 source/.github/workflows/Compiler-settings/tool.py _logs/SSCB_SCAN_results-Linux.json source/.github/workflows/Compiler-settings/config.yaml)
          echo "$output"
          if [[ "$output" == "Fail" ]]; then
            echo "Failure detected."
          exit 1
          else
            echo "No failure detected."
          fi
          
      - name: Check Disposition issue (Windows)
        if: success() && runner.os == 'Windows'
        run: |
          py -m pip install pyyaml
          $output = py source\.github\workflows\Compiler-settings\tool.py _logs\SSCB_SCAN_results-Windows.json source\.github\workflows\Compiler-settings\config.yaml
          Write-Output $output
          if ($output -like '*Status: Fail*') {
            Write-Output "Failure detected."
            exit 1
          } else {
            Write-Output "No failure detected."
          }
          
      - name: Copy config.yaml to _logs (Linux)
        if: success() && runner.os == 'Linux'
        run: sudo cp source/.github/workflows/Compiler-settings/config.yaml _logs/

      - name: Copy config.yaml to _logs (Windows)
        if: success() && runner.os == 'Windows'
        run: cp source\.github\workflows\Compiler-settings\config.yaml _logs\

      - name: Record Artifacts
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
            name: ${{ inputs.OS }}-complier_settings
            path: _logs/*

      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *

      - name: Cleanup workspace (Windows)
        if: always() && runner.os == 'Windows'
        run: Remove-Item -Recurse -Force .\*
