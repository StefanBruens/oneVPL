name: Dynamic Analysis Test
run-name: Dynamic Analysis Test (Triggered by ${{ github.event_name }} by @${{ github.actor }})
on:
  workflow_call:
    inputs:
      ARTIFACT:
        description: 'Artifact to test'
        required: true
        type: string

jobs:
  test:
    runs-on: [self-hosted, Linux, docker]
    steps:
      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *
      - name: Checkout dispatcher source
        uses: actions/checkout@v3
        with:
          path: source
      - name: Load runtime overrides
        uses: actions/cache/restore@v3
        with:
          path: runtimes
          key: runtimes
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.ARTIFACT }}
          path: package
      - name: Extract package
        run: unzip package/*.zip -d _install
      - name: Write Docker File
        run: |
          USER_ID=$(id -u ${USER})
          GROUP_ID=$(id -g ${USER})
          # Dockerfile will contain everything between <<EOL and EOL
          cat >Dockerfile <<EOL
          #FROM ubuntu:22.04
          FROM public.ecr.aws/lts/ubuntu:22.04

          ARG HTTP_PROXY
          ARG HTTPS_PROXY
          ARG NO_PROXY
          ENV http_proxy \${HTTP_PROXY}
          ENV https_proxy \${HTTPS_PROXY}
          ENV no_proxy \${NO_PROXY}

          ARG DEBIAN_FRONTEND=noninteractive

          # Install test system prerequisites
          RUN apt-get update && apt-get install -y --no-install-recommends \
                git \
                python3 \
                python3-pip \
                && \
              rm -rf /var/lib/apt/lists/*

          # install xcb libs. 
          RUN apt-get update && apt-get install -y --no-install-recommends \
                libxcb-dri3-0 \
                libx11-xcb1 \
                libxcb-present0 \
                && \
              rm -rf /var/lib/apt/lists/*

          # no intel-opencl-icd 
          RUN apt-get update && apt-get install -y --no-install-recommends \
                intel-media-va-driver-non-free \
                libigfxcmrt7 \
                && \
              rm -rf /var/lib/apt/lists/*

          # Install Graphics runtime package
          RUN apt-get update && apt-get install -y --no-install-recommends \
                gpg-agent wget gpg

          RUN wget -e "no_proxy=" -vO - https://repositories.intel.com/graphics/intel-graphics.key | \
              gpg --dearmor --output /usr/share/keyrings/intel-graphics.gpg
              
          RUN echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/graphics/ubuntu jammy arc' | \
              tee  /etc/apt/sources.list.d/intel.gpu.jammy.list
              
          # no intel-level-zero-gpu level-zero libvpl2 vainfo
          RUN unset no_proxy && unset NO_PROXY && apt-get update && apt-get install -y --no-install-recommends \
              libmfx1 \
              libmfxgen1 \
                && \
              rm -rf /var/lib/apt/lists/*
              
          RUN unset no_proxy && unset NO_PROXY && apt-get update && apt-get install -y --no-install-recommends \
                intel-opencl-icd intel-level-zero-gpu level-zero \
                intel-media-va-driver-non-free libmfx1 libmfxgen1 libvpl2 \
                libegl-mesa0 libegl1-mesa libegl1-mesa-dev libgbm1 libgl1-mesa-dev libgl1-mesa-dri \
                libglapi-mesa libgles2-mesa-dev libglx-mesa0 libigdgmm12 libxatracker2 mesa-va-drivers \
                mesa-vdpau-drivers mesa-vulkan-drivers va-driver-all \
                libigc-dev \
                intel-igc-cm \
                libigdfcl-dev \
                libigfxcmrt-dev \
                level-zero-dev \
                && \
              rm -rf /var/lib/apt/lists/*
              
          # install build tools to test examples
          RUN apt-get update && apt-get install -y --no-install-recommends \
                cmake \
                build-essential \
                pkg-config \
                && \
              rm -rf /var/lib/apt/lists/*

          # install libs for examples hw support
          RUN unset no_proxy && unset NO_PROXY && apt-get update && apt-get install -y --no-install-recommends \
                libva-dev \
                && \
              rm -rf /var/lib/apt/lists/*
              
          RUN apt-get update && apt-get install -y --no-install-recommends valgrind \
                && \
              rm -rf /var/lib/apt/lists/*

          RUN groupadd -g \$GROUP_ID user || true
          RUN adduser -rm --uid \$USER_ID --gid \$GROUP_ID user || true
          EOL
          docker build \
            --build-arg HTTP_PROXY=$http_proxy \
            --build-arg HTTPS_PROXY=$https_proxy \
            --build-arg NO_PROXY=$no_proxy \
            -t vplgputestenv:github_runner .
      - name: Test package in container
        run: |
          cat >test.sh <<EOL
          #!/bin/bash
          set -o errexit
          set -o nounset
          ls _install
          if [ -f "_install/etc/vpl/vars.sh" ]; then
            . _install/etc/vpl/vars.sh
          else
            . "_install/env/vars.sh"
          fi
          export CONTENT=\$(pwd)/_install/share/vpl/examples/content
          ./source/.github/workflows/dynamic_analysis/test.sh 2>&1 | tee results_log.txt
          EOL
          chmod a+x ./source/.github/workflows/dynamic_analysis/test.sh
          chmod a+x ./test.sh
          docker run --rm -v $(pwd):/tmp/work \
            -e ONEVPL_PRIORITY_PATH=/tmp/work/runtimes \
            -w /tmp/work --privileged vplgputestenv:github_runner /tmp/work/test.sh

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ inputs.ARTIFACT }}-dynamic-analysis
          path: results_*
      - name: Cleanup workspace (Linux)
        if: always() && runner.os == 'Linux'
        run: sudo rm -rf ..?* .[!.]* *
  